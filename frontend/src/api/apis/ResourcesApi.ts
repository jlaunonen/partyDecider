/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
} from '../models';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models';

export interface ResHeaderRequest {
    appId: number;
}

export interface ResIconRequest {
    appId: number;
}

/**
 * 
 */
export class ResourcesApi extends runtime.BaseAPI {
    makeQueryParameters(queryParameters: any): string {
        if (Object.keys(queryParameters).length !== 0) {
            // only add the querystring to the URL if there are query parameters.
            // this is done to avoid urls ending with a "?" character which buggy webservers
            // do not handle correctly sometimes.
            return '?' + this.configuration.queryParamsStringify(queryParameters);
        }
        return "";
    }

    resHeader_Path(requestParameters: ResHeaderRequest): string {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling resHeader.');
        }

        const queryParameters: any = {};


        const path = `/res/logo/{app_id}`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId)));

        return this.configuration.basePath + path + this.makeQueryParameters(queryParameters);
    }

    /**
     * App/game header/logo resource.
     */
    async resHeaderRaw(requestParameters: ResHeaderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling resHeader.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/res/logo/{app_id}`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * App/game header/logo resource.
     */
    async resHeader(requestParameters: ResHeaderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.resHeaderRaw(requestParameters, initOverrides);
    }

    resIcon_Path(requestParameters: ResIconRequest): string {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling resIcon.');
        }

        const queryParameters: any = {};


        const path = `/res/icon/{app_id}`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId)));

        return this.configuration.basePath + path + this.makeQueryParameters(queryParameters);
    }

    /**
     * App/game icon resource.
     */
    async resIconRaw(requestParameters: ResIconRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling resIcon.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/res/icon/{app_id}`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * App/game icon resource.
     */
    async resIcon(requestParameters: ResIconRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.resIconRaw(requestParameters, initOverrides);
    }

}
